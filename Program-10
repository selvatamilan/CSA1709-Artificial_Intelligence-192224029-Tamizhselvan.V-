from queue import PriorityQueue

def a_star(graph, start, goal, heuristic):
    pq = PriorityQueue()
    pq.put((0, start))
    
    g = {start: 0}  # Cost from start
    parent = {start: None}
    
    while not pq.empty():
        _, current = pq.get()
        
        if current == goal:
            path = []
            while current is not None:
                path.append(current)
                current = parent[current]
            path.reverse()
            return path, g[goal]
        
        for neighbor, cost in graph[current].items():
            temp_g = g[current] + cost
            if neighbor not in g or temp_g < g[neighbor]:
                g[neighbor] = temp_g
                f = temp_g + heuristic[neighbor]
                pq.put((f, neighbor))
                parent[neighbor] = current
    return None, float("inf")


# Example Graph
graph = {
    'A': {'B': 1, 'C': 3},
    'B': {'D': 3, 'E': 5},
    'C': {'F': 7},
    'D': {'G': 1},
    'E': {'G': 1},
    'F': {'G': 2},
    'G': {}
}

# Example Heuristic Values (h)
heuristic = {
    'A': 7,
    'B': 6,
    'C': 5,
    'D': 2,
    'E': 3,
    'F': 1,
    'G': 0
}

# Run A*
path, cost = a_star(graph, 'A', 'G', heuristic)
print("Optimal Path:", path)
print("Total Cost:", cost)
