# Map Coloring Problem using Backtracking (CSP)

def is_safe(node, color, assignment, graph):
    for neighbor in graph[node]:
        if neighbor in assignment and assignment[neighbor] == color:
            return False
    return True

def backtrack(graph, colors, assignment, nodes, index=0):
    if index == len(nodes):
        return assignment
    
    node = nodes[index]
    for color in colors:
        if is_safe(node, color, assignment, graph):
            assignment[node] = color
            result = backtrack(graph, colors, assignment, nodes, index + 1)
            if result:
                return result
            assignment.pop(node)  # Backtrack
    return None

def map_coloring(graph, colors):
    nodes = list(graph.keys())
    assignment = {}
    return backtrack(graph, colors, assignment, nodes)


# Example Map (Adjacency List)
graph = {
    'WA': ['NT', 'SA'],
    'NT': ['WA', 'SA', 'Q'],
    'SA': ['WA', 'NT', 'Q', 'NSW', 'V'],
    'Q':  ['NT', 'SA', 'NSW'],
    'NSW':['Q', 'SA', 'V'],
    'V':  ['SA', 'NSW'],
    'T':  []  # Tasmania isolated
}

# Available colors
colors = ['Red', 'Green', 'Blue']

solution = map_coloring(graph, colors)

print("Map Coloring Solution:")
for region, color in solution.items():
    print(f"{region} â†’ {color}")
