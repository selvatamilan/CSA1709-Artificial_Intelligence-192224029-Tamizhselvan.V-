from itertools import permutations

# Travelling Salesman Problem (TSP) using Brute Force
def travelling_salesman(graph, start):
    vertices = list(range(len(graph)))
    vertices.remove(start)
    min_path = float("inf")
    best_route = []
    
    # Generate all permutations of remaining vertices
    for perm in permutations(vertices):
        current_cost = 0
        k = start
        
        # Travel the path
        for j in perm:
            current_cost += graph[k][j]
            k = j
        
        # Return to starting point
        current_cost += graph[k][start]
        
        # Update minimum path if found
        if current_cost < min_path:
            min_path = current_cost
            best_route = [start] + list(perm) + [start]
    
    return best_route, min_path


# Example Graph (Adjacency Matrix)
graph = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

start_city = 0
route, cost = travelling_salesman(graph, start_city)

print("Optimal Route:", route)
print("Minimum Cost:", cost)
