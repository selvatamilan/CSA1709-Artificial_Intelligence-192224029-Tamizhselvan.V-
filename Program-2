# Function to print the board
def print_board(board, n):
    for i in range(n):
        for j in range(n):
            print("Q" if board[i][j] == 1 else ".", end=" ")
        print()
    print()

# Check if placing a queen is safe
def is_safe(board, row, col, n):
    # Check column
    for i in range(row):
        if board[i][col] == 1:
            return False
    
    # Check upper-left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    # Check upper-right diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 1:
            return False
    
    return True

# Solve using Backtracking
def solve_n_queen(board, row, n):
    if row == n:
        print_board(board, n)
        return True
    
    res = False
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            res = solve_n_queen(board, row + 1, n) or res
            board[row][col] = 0  # Backtrack
    return res

# Driver function
def n_queen(n=8):
    board = [[0] * n for _ in range(n)]
    if not solve_n_queen(board, 0, n):
        print("No solution exists")

# Run for 8 queens
n_queen(8)
